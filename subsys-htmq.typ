#import "@preview/bytefield:0.0.5": *
#import "lib/pugh.typ": *

= High Throughput Message Queue (HTMQ)

The High Throughput Message Queue (HTMQ) is the backbone of interplanetary communications. The immediate goal is to enable reliable communication between Earth and Mars, but eventually to be able to scale up to connect future colonies in the solar system. It is a high data transfer, high capacity, high reliability message queue that is used to send messages between network nodes within the solar system. The HTMQ is a store-and-forward message queue that is designed to handle the high latency and high error rates of interplanetary communications. It is a distributed system that is implemented as a network of message queues that are connected by high-speed optical laser links. The HTMQ is designed to be fault-tolerant and scalable to meet future needs.

== Architecture

The HTMQ is a distributed system that is implemented as a network of priority message queues. Each message queue is a node in the network. The system keeps track of the physical location of each node so that it can route messages to the correct next hop. The system is designed to be fault-tolerant so that it can continue to operate even if some nodes are temporarily unavailable or lost. The system is analogous to the Internet, but with a focus on interplanetary communications.

=== Alternatives Considered

A few alternative systems have been considered for long range communication.

#figure(
	pugh(
		("Physical Shipment", "Optical Message Queue", "RF Message Queue"),
		(
			(criterion: "Data Throughput", weight: 5),
			(criterion: "Weight Efficiency", weight: 3),
			(criterion: "Power Efficiency", weight: 4),
			(criterion: "Physical Volume", weight: 2),
			(criterion: "Reliability", weight: 3),
			(criterion: "Directionality", weight: 1),
			(criterion: "Cost", weight: 4),
		),
		(
			(5, 4, 1),
			(2, 5, 3),
			(1, 5, 3),
			(1, 5, 2),
			(3, 5, 5),
			(4, 5, 1),
			(1, 5, 5),
		)
	),
	caption: [Pugh matrix comparing the HTMQ to alternative systems.],
) <Table::htmq-pugh>

// TODO: explain the alternatives

== Handshaking and Connection Establishment

Due to the highly directional nature of laser communications, establishing a laser link requires alignment of the transmitter and receiver. This is done as a part of the handshaking process.

As shown in @Figure::htmq-handshake, first, the transmitter sends a beacon signal addressed to the receiver over traditional RF communications. Using reaction wheels, the spacecraft can adjust its orientation to align the laser with the receiver. Once the laser link is established, the transmitter and receiver perform a PQXDH key exchange to establish a secure connection. @kret2023pqxdh Once complete, the connection is considered fully established and message transfer can begin.

#figure(
	image("figures/htmq/htmq-handshake.svg"),
	caption: [Sequence diagram of the HTMQ handshake process.],
) <Figure::htmq-handshake>

=== Encryption

The HTMQ uses the PQXDH key exchange algorithm to establish a secure connection between nodes. PQXDH is a post-quantum key exchange algorithm that is designed to be secure against quantum computers. @kret2023pqxdh @cryspenPQXDH

Notably, the PQXDH key exchange algorithm has three parties: Alice (the sender), Bob (the receiver), and the server, the purpose of which is to support asynchronisity in the time Alice sends the message and Bob receives it. @kret2023pqxdh However, for the purpose of internode communication in the HTMQ, the server is not used. Instead, the sender and receiver directly exchange keys. Bob takes the role of both the receiver and the server.

== Data Transfer

High speed data transfer is one of the key features of the HTMQ. This high data transfer rate allows the HTMQ to handle the large amounts of data that are generated by interplanetary missions. The HTMQ will be able to handle the data transfer requirements of future missions, including but not limited to manned missions to Mars. Note that because of the laws of physics, this does not mean that latency is low. Rather, transfer speed merely refers to the amount of data that can be transferred in a given time frame.

Using optical laser links, the HTMQ can transfer data at speeds of up to 200 Gbps in the vacuum of space. @NASAfastestlaserlink Laser links are used because they are faster than radio links and have a significantly higher bandwidth, and the directed nature of lasers makes intercepting messages difficult. @NASAlasercomms

Shown in @Figure::htmq-node-relay, once a connection is established, messages are relayed from node to node until they reach their destination. Each node in the network is responsible for routing messages to the correct next hop. Nodes can only dispose of a message once it receives an acknowledgment from the *destination* node. This ensures that messages are not lost in transit. Messages are broken down into packets, which are then sent over the laser link. The packets are reassembled at the destination node, and retransmission is attempted if any packets are lost.

#figure(
	image("figures/htmq/htmq-node-relay.svg", width: 70%),
	caption: [Sequence diagram of how messages are transferred once a connection is established.],
) <Figure::htmq-node-relay>

=== Messages

Messages in the HTMQ are stored in a priority queue. Each message has a priority level that determines the order in which it is processed. Messages with higher priority levels are processed before messages with lower priority levels. Messages are stored in the queue until they are delivered to their destination. The system is designed to handle messages of any size, from small telemetry packets to large image files.

Once a message is delivered to its destination, the destination node sends an acknowledgment back to the source node. This acknowledgment is used to confirm that the message was successfully delivered. If the acknowledgment is not received within a certain time frame, nodes in the network will attempt to resend the message along a different route.

== Routing

An important prerequisite for the HTMQ to be able to deliver messages is the ability to route messages to the correct next hop. The HTMQ uses a distributed routing algorithm to determine the next hop for each message.

The routing algorithm is based on a combination of the physical location of each node and the current network topology. Each node in the network maintains a routing table that contains the physical location of each node in the network. When a message is received, the node uses this routing table to determine the next hop for the message. The routing table is updated periodically to reflect changes in the network topology.

This works similarly to the Internet, where routers maintain a routing table that is used to determine the next hop for each packet. The HTMQ uses a similar approach to route messages between nodes in the network. The primary difference is that the HTMQ is designed to handle the high latency of interplanetary communications, and additionally takes into account the predicted movement of nodes in the network as they orbit their respective bodies.

// TODO: pseudocode for routing algorithm

=== Maintaining Network Topology

The HTMQ uses a combination of predictive orbital mechanics and real-time range measurements to maintain an accurate network topology. Each node in the network periodically broadcasts its measurements to its neighbors. From this information, each node can calculate the relative position of its neighbors and update its routing table accordingly. Nodes that have authoritative absolute position information (e.g., Earth and Mars) allow the network to resolve relative positions into absolute positions.

// TODO: node address assignment, structure

== Link Protocol

The HTMQ's Link Protocol is a custom protocol that is used to send messages between nodes in the network.

=== Packet Structure

Communication is structured as an exchange of packets. Each packet contains a header and a payload. The header contains information about the packet, such as the protocol version, the packet length, and a CRC32 checksum. The payload contains the actual content of the packet. All numbers are encoded as little endian.

#block(breakable: false)[
	The packet structure is shown in the following bytefield:

	#bytefield(
		bitheader(
			"bytes",
		),
		group(right, 3)[Header],
		bytes(2)[Protocol Version],
		bytes(2, fill: luma(180))[#text(style: "italic", "Reserved")],
		bits(32)[CRC32],
		bytes(4)[Packet Length],
		group(right, 6)[Payload],
		bytes(24)[Packet Content],
	)
]

=== Message Structure

Messages are the highest level of abstraction in the HTMQ. They are composed of blocks, which are sent as packets over the network. Each block contains a portion of the message content, and the blocks are reassembled at the destination node to reconstruct the original message.

#figure(
	pugh(
		("Cap'n Proto", "Protobuf", "JSON", "XML"),
		(
			(criterion: "Serialization Speed", weight: 5),
			(criterion: "Deserialization Speed", weight: 5),
			(criterion: "Message Size", weight: 3),
			(criterion: "Error Handling", weight: 4),
			(criterion: "Extensibility", weight: 3),
		),
		(
			(5, 2, 2, 1),
			(4, 5, 2, 1),
			(1, 3, 4, 1),
			(5, 5, 3, 2),
			(4, 1, 3, 5),
		)
	),
	caption: [Pugh matrix comparing different wire formats for HTMQ messages.],
)


The following Cap'n Proto schema defines the structure of a message and its blocks:

```capnp
struct Message {
	id @0 :List(UInt8); // UUIDv4, encoded as 128 bits
	service @1 :Text: // Service name (e.g., "telemetry")
	source @2 :List(UInt8); // The address of the sender, encoded as 128 bits
	dest @3 :List(UInt8); // The address of the receiver encoded as 128 bits
	contentlength @4 :UInt64; // The length of the content in bytes
	priority @5 :UInt8; // The priority of the message
	blocksize @6 :UInt64; // The size of each block in bytes
	blocks @7 :List(Block); // The blocks that make up the message
}

struct Block {
	index @0 :UInt64; // The index of the block in the message
	checksum @1 :Text; // The checksum of the block, SHA256
	blob @2 :Data; // The content of the block
}
```


